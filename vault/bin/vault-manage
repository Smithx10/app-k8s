#!/bin/bash
set -eo pipefail

preStart() {
  sed -i "s/\$\$IP_ADDRESS/${CONSUL}/" /etc/vault-no-tls.hcl
}

start() {
  _log 'starting vault server'
  /usr/local/bin/vault server -config /etc/vault-no-tls.hcl
}

health() {
  /usr/local/bin/vault status
}

_log() {
    echo "    $(date -u '+%Y-%m-%d %H:%M:%S') containerpilot: $@"
}

createPgpKey() {
  echo '* Creating PGP key...'
  gpg -q --batch --gen-key <<EOF
Key-Type: RSA
Key-Length: 2048
Name-Real: Example User
Name-Email: example@example.com
Passphrase: example
Expire-Date: 0
%commit
EOF
}

exportPgpKey() {
  gpg --export 'Example User <example@example.com>' | base64 > /ran/my-pgp-public-key.asc
  PGP_KEYFILE="example.asc"
  echo '* Created a PGP key and exported the public key to example.asc'
}

vaultInit() {
  # Wait for vault to come up healthy
  while [[ -z ${vaultIP} ]]; do
    vaultIP=$(curl ${CONSUL}:8500/v1/catalog/service/vault-node | jq -r '.[]  | select(.ServiceName == "vault-node") | .ServiceAddress')
    sleep 3
    _log "vaultIP is: ${vaultIP}"
  done    
  
  initialized=$(curl -sL -X GET --fail http://${CONSUL}:8500/v1/kv/vaultInitialized)
  if [[ -z ${initialized} ]]; then
    # Create a Key
      #createPgpKey
    # Export the Key
      #exportPgpKey
    # Init the Vault
      vault operator init -address=http://${vaultIP}:8200  > /ran/my-vault_keys
    # Put in check that we've already init'd vault.
      curl -sL -x PUT --fail -d 'true' http://${CONSUL}:8500/v1/kv/vaultInitialized
    
    # Move gpg private keys to be consumed by the users
      mv /root/.gnupg/private-keys-v1.d/* /ran/my-pgp-private-key.key
    # Run http server to allow download of pgp key and vault keys.
      /usr/local/bin/ran -make-cert -cert=/ran/ran-cert.pem -key=/ran/ran-key.pem
      /usr/local/bin/ran -cert=/ran/ran-cert.pem -key=/ran/ran-key.pem -tls-policy=redirect -port=8080 -tls-port=8081 -listdir=true -root=/ran

  else 
    _log 'Vault has already been initilized'
  fi
}

ranHealth () {
  curl -sLf -o /dev/null http://localhost:8080
}
# ---------------------------------------------------
# parse arguments

# Get function list
funcs=($(declare -F -p | cut -d " " -f 3))

until
    if [ ! -z "$1" ]; then
        # check if the first arg is a function in this file, or use a default
        if [[ " ${funcs[@]} " =~ " $1 " ]]; then
            cmd=$1
            shift 1
        fi

        $cmd "$@"
        if [ $? == 127 ]; then
            help
        fi

        exit
    else
        health
    fi
do
    echo
done
