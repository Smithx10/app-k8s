#!/bin/bash
set -eo pipefail

preStart() {
  sed -i "s/\$\$IP_ADDRESS/${CONSUL}/" /etc/vault.hcl
}

start() {
  _log 'starting vault server'
  /usr/local/bin/vault server -config /etc/vault.hcl
}

health() {
  /usr/local/bin/vault status
}

_log() {
    echo "    $(date -u '+%Y-%m-%d %H:%M:%S') containerpilot: $@"
}

createPgpKey() {
  echo '* Creating PGP key...'
  gpg -q --batch --gen-key <<EOF
Key-Type: RSA
Key-Length: 2048
Name-Real: Example User
Name-Email: example@example.com
Passphrase: example
Expire-Date: 0
%commit
EOF
}

exportPgpKey() {
  gpg --export 'Example User <example@example.com>' | base64 > /ran/my-pgp-public-key.asc
  PGP_KEYFILE="example.asc"
  echo '* Created a PGP key and exported the public key to example.asc'
}

getVaultIP() {
  while [[ -z ${vaultIP} ]]; do
    vaultIP=$(curl ${CONSUL}:8500/v1/catalog/service/vault-node | jq -r '.[]  | select(.ServiceName == "vault-node") | .ServiceAddress')
    sleep 3
    _log "vaultIP is: ${vaultIP}"
  done    
}

vaultInit() {
  # Wait for vault to come up healthy
  getVaultIP 

  initialized=$(curl -sL -X GET --fail http://${CONSUL}:8500/v1/kv/vaultInitialized)
  if [[ -z ${initialized} ]]; then
    # Create a Key
      #createPgpKey
    # Export the Key
      #exportPgpKey
    # Init the Vault
      vault operator init -address=http://${vaultIP}:8200 -key-shares=1 -key-threshold=1 > /ran/my-vault_keys
    # Put in check that we've already init'd vault.
      curl -sL -X PUT --fail -d 'true' http://${CONSUL}:8500/v1/kv/vaultInitialized
    # Move gpg private keys to be consumed by the users
      mv /root/.gnupg/private-keys-v1.d/* /ran/my-pgp-private-key.key
    # Run http server to allow download of pgp key and vault keys.
      /usr/local/bin/ran -make-cert -cert=/ran/ran-cert.pem -key=/ran/ran-key.pem
      /usr/local/bin/ran -cert=/ran/ran-cert.pem -key=/ran/ran-key.pem -tls-policy=redirect -port=8080 -tls-port=8081 -listdir=true -root=/ran

  else 
    _log 'Vault has already been initilized'
  fi
}


getToken() {
  while [[ -z ${vaultToken} ]]; do
    vaultToken=$(curl -sL -X GET --fail http://${CONSUL}:8500/v1/kv/vaultToken?raw)
    _log "vaultToken is: ${vaultToken}"
    sleep 10
  done
}

getCerts() {
  getVaultIP
  _log "Getting Certificates from Vault"
  _log "vaultToken is: ${vaultToken}"
# Create Cert directory 
  mkdir /certs
# Grab Certificates 
  httpResp=/certs/httpResp
  curl -X POST --header "X-Vault-Token:${vaultToken}" --data '{"common_name": "vault"}' http://${vaultIP}:8200/v1/pki/issue/vaultserver > ${httpResp}

# Write out Certificates to the file system and set Env Vars
  VAULT_CAPATH=/certs
  VAULT_CACERT=ca.pem
  VAULT_CLIENT_CERT=cert.crt
  VAULT_CLIENT_KEY=client.key

  cat ${httpResp} | jq -r .data.issuing_ca > ${VAULT_CAPATH}/${VAULT_CACERT}
  cat ${httpResp} | jq -r .data.certificate > ${VAULT_CAPATH}/${VAULT_CLIENT_CERT}
  cat ${httpResp} | jq -r .data.private_key > ${VAULT_CAPATH}/${VAULT_CLIENT_KEY}

  sed -i s/'tls_disable = 1'/'tls_disable = 0'/ /etc/vault.hcl
  sed -i s/'#tls_client_ca_file = \/certs\/bob'/"tls_client_ca_file = \"\\${VAULT_CAPATH}\/${VAULT_CACERT}\""/ /etc/vault.hcl
  sed -i s/'#tls_cert_file = \/certs\/bob'/"tls_cert_file = \"\\${VAULT_CAPATH}\/${VAULT_CLIENT_CERT}\""/ /etc/vault.hcl
  sed -i s/'#tls_key_file = \/certs\/bob'/"tls_key_file = \"\\${VAULT_CAPATH}\/${VAULT_CLIENT_KEY}\""/ /etc/vault.hcl
  
  curl -sL -X PUT --fail -d 'true' http://${CONSUL}:8500/v1/kv/vaultTLSConfigured
}

configureTLS() {
  _log 'checking to see if TLS has already been configured'
  vaultTLSConfigured=$(curl -sL -X GET --fail http://${CONSUL}:8500/v1/kv/vaultTLSConfigured)
  if [[ -z ${vaultTLSConfigured} ]]; then
    _log 'Starting 10s poll for the short-lived vault token to bootstrap TLS'
    getToken
    getCerts
    reloadCP
  else
    _log 'vault has already configured TLS'
  fi
}

reloadCP() {
  _log 'Reloading CP...'
  /usr/local/bin/containerpilot -reload
}

ranHealth () {
  curl -sLf -o /dev/null http://localhost:8080
}
# ---------------------------------------------------
# parse arguments

# Get function list
funcs=($(declare -F -p | cut -d " " -f 3))

until
    if [ ! -z "$1" ]; then
        # check if the first arg is a function in this file, or use a default
        if [[ " ${funcs[@]} " =~ " $1 " ]]; then
            cmd=$1
            shift 1
        fi

        $cmd "$@"
        if [ $? == 127 ]; then
            help
        fi

        exit
    else
        health
    fi
do
    echo
done
